#! /bin/sh

##############################################################################
# Introduction
##############################################################################

# picoCA - a minimal certificate authority
#   - simplicity is the main goal, not generality

# Algorithm: ED25519
# License: GPL 3.0 or later (https://www.gnu.org/licenses/gpl-3.0.en.html)
# Author: Jo Totland

_picoCA_usage() {
    cat << EOF
picoCA - a minimal certificate authority

Creates certificates for client, server and CA in the current directory.

A CA will be automatically created when you create first certificate.

Usage:
    picoCA create_server_cert CN [SAN]
    picoCA create_client_cert CN [SAN]
        CN = is the common name of the certificate
        SAN = comma-separated list of subject alternate names (can be omitted)
    picoCA inspect_key filename
    picoCA inspect_cert filename
    picoCA inspect_cert_bundle filename

Environment variables:
    picoCA_SUBJ: other parts of DN than CN
    picoCA_CA: name of the ca
    picoCA_DAYS: lifetime of certificate, default 100 years
(see source code for details)

Example session:
    ~$ mkdir ca; cd ca
    ~/ca$ picoCA create_server_cert server DNS:foo.com,DNS:bar.org
    ~/ca$ ls
    ca.cert  ca.srl       server.certbundle  server.key+cert  server.pfx
    ca.key   server.cert  server.key         server.p7b
    ~/ca$ picoCA create_client_cert client email:testing@example.org
    ~/ca$ ls
    ca.cert  client.cert        client.key+cert  server.cert        server.key+cert
    ca.key   client.certbundle  client.p7b       server.certbundle  server.p7b
    ca.srl   client.key         client.pfx       server.key         server.pfx
    ~/ca$ cp server.* ca.cert /path/to/server/config
    ~/ca$ cp client.* ca.cert /path/to/client/config
EOF
}

##############################################################################
# Configuration
##############################################################################

# Change the name of the CA, if you care for it
if test -z "$picoCA_CA"; then
    picoCA_CA=ca
fi

# Change here, or define in shell if you want a different lifetime than 100 years
if test -z "$picoCA_DAYS"; then
    picoCA_DAYS=36500
fi

# Change here (or define in shell) if subject/DN should contain more than just CN
#picoCA_SUBJ="/O=Acme/OU=Widgets/C=no/L=Oslo/emailAddress=support@acme.com/DC=acme/DC=com"

##############################################################################
# End of intro
##############################################################################

create_server_cert() {
    if test $# -lt 1 -o $# -gt 2; then
        echo "Usage: create_server_cert CN [SAN]"
        echo "  -- where CN is the common name of your desired server certificate"
        echo "  -- and [SAN] is a comma-separated list of subject alternate names"
        return 1
    else
        local extfile=$(_server_cert_extensions_file)
        _create_cert "$extfile" "$@"
        rm $extfile
    fi
}

create_client_cert() {
    if test $# -lt 1 -o $# -gt 2; then
        echo "Usage: create_server_cert CN [SAN]"
        echo "  -- where CN is the common name of your desired client certificate"
        echo "  -- and [SAN] is a comma-separated list of subject alternate names"
        return 1
    else
        local extfile=$(_client_cert_extensions_file)
        _create_cert "$extfile" "$@"
        rm $extfile
    fi
}

_to_pkcs12() {
    if test $# -ne 1; then
        echo "Usage: _to_pkcs12 CN"
        return 1
    fi
    openssl pkcs12 -export -out "$1.pfx" -keypbe NONE -certpbe NONE -nomaciter -passout pass: -inkey "$1.key" -in "$1.cert" -certfile "$picoCA_CA.cert"
}

_to_pkcs7() {
    if test $# -ne 1; then
        echo "Usage: _to_pkcs7 CN"
        return 1
    fi
    openssl crl2pkcs7 -nocrl -out "$1.p7b" -certfile "$1.cert" -certfile "$picoCA_CA.cert"
}

inspect_key() {
    if test $# -ne 1; then
        echo "Usage: inspect_key [private-key-filename]"
        return 1
    elif test -f "$1"; then
        openssl pkey -in "$1" -text -noout
    elif test -f "$1.key"; then
        openssl pkey -in "$1.key" -text -noout
    else
        echo "Failed to open '$1'"
        return 1
    fi
}

inspect_cert() {
    if test $# -ne 1; then
        echo "Usage: inspect_cert [certificate-filename]"
        return 1
    elif test -f "$1"; then
        openssl x509 -in "$1" -text -noout
    elif test -f "$1.cert"; then
        openssl x509 -in "$1.cert" -text -noout
    else
        echo "Failed to open '$1'"
        return 1
    fi
}

inspect_cert_bundle() {
    if test $# -ne 1; then
        echo "Usage: inspect_cert_bundle [cert-bundle-filename]"
        return 1
    elif test -f "$1"; then
        openssl crl2pkcs7 -nocrl -certfile "$1" \
            | openssl pkcs7 -print_certs -text -noout
    elif test -f "$1.certbundle"; then
        openssl crl2pkcs7 -nocrl -certfile "$1.certbundle" \
            | openssl pkcs7 -print_certs -text -noout
    else
        echo "Failed to open '$1'"
        return 1
    fi
}

_create_cert() {
    if test $# -lt 2 -o $# -gt 3; then
        echo "Usage: _create_cert extfile CN [SAN]"
        return 1
    else
        local extfile="$1"; shift
        local cn="$1"; shift
        if test $# -ge 1; then
            echo "subjectAltName = $1" >> $extfile
        fi
        if test -f "$cn.cert"; then
            echo "Certificate '$cn.cert' already exists, aborting!"
            return 1
        fi
        if test -f "$cn.certbundle"; then
            echo "Certificate '$cn.certbundle' already exists, aborting!"
            return 1
        fi
        csr=$(tempfile)
        rm "$csr"
        errmsg=$(tempfile)
        rm "$errmsg"
        if ! (umask 0077 \
            && (test -f "$picoCA_CA.cert" || _create_ca) \
            && (test -f "$cn.key" || openssl genpkey -algorithm ED25519 -out "$cn.key") \
            && openssl req -new -key "$cn.key" -utf8 -subj "$picoCA_SUBJ/CN=$cn" -out "$csr" \
            && openssl x509 -req -extfile "$extfile" -in "$csr" -days $picoCA_DAYS \
            --CA "$picoCA_CA.cert" -CAkey "$picoCA_CA.key" -CAcreateserial \
            -out "$cn.cert" 2> "$errmsg" \
            && cat "$cn".cert "$picoCA_CA".cert > "$cn".certbundle \
            && cat "$cn".key "$cn".cert > "$cn".key+cert \
            && _to_pkcs12 "$cn" \
            && _to_pkcs7 "$cn" \
            && chmod 644 "$cn.cert" "$cn.certbundle" "$cn.p7b" \
            && rm "$csr" "$errmsg"); then
                    echo "Error creating '$picoCA_CA.key', '$picoCA_CA.cert', '$cn.key' or '$cn.cert', aborting!"
                    test -f "$errmsg" && cat "$errmsg" && rm "$errmsg"
                    test -f "$csr" && rm "$csr"
                    return 1
        fi
    fi
}

_create_ca() {
    if test $# -ne 0; then
        echo "Usage: _create_ca"
        return 1
    else
        if test -f "$picoCA_CA.cert"; then
            echo "Certificate '$cn.cert' already exists, aborting!"
            return 1
        fi
        # local extfile=$(_ca_cert_extensions_file)
        if ! (umask 0077 \
            && (test -f "$picoCA_CA.key" || openssl genpkey -algorithm ED25519 -out "$picoCA_CA.key") \
            && openssl req -new -x509 -extensions v3_ca -utf8 -subj "$picoCA_SUBJ/CN=$picoCA_CA" \
            -key "$picoCA_CA.key" -out "$picoCA_CA.cert" \
            && chmod 644 "$picoCA_CA.cert"); then
                    echo "Error creating '$picoCA_CA.key' or '$picoCA_CA.cert', aborting!"
                    return 1
        fi
        # rm $extfile
    fi
}

_client_cert_extensions_file() {
    local file=$(tempfile)
    cat << EOF > "$file"
basicConstraints = critical, CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always, issuer:always
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = critical, clientAuth
EOF
    echo "$file"
}

_server_cert_extensions_file() {
    local file=$(tempfile)
    cat << EOF > "$file"
basicConstraints = critical, CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always, issuer:always
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment, keyAgreement
extendedKeyUsage = critical, serverAuth
EOF
    echo "$file"
}

_picoCA_pager() {
    if test -z "$PAGER"; then
        if command -v less > /dev/null; then
            PAGER=less
        elif command -v more > /dev/null; then
            PAGER=more
        else
            PAGER=cat
        fi
    fi
    if test -t 1; then
        "$PAGER"
    else
        cat
    fi
}

##############################################################################
# Main program
##############################################################################

if test -z "$BASH_SOURCE"; then
    if test $# -ge 1; then
        case $1 in
            inspect_key | inspect_cert | inspect_cert_bundle | \
                create_server_cert | create_client_cert )
                            if ! command -v openssl > /dev/null; then
                                echo "picoCA error: 'openssl' not in \$PATH, aborting!" \
                                    > /dev/stderr
                                exit 1
                            fi
                            "$@"
                            ;;
                        *)
                            _picoCA_usage | _picoCA_pager
                            ;;
                    esac
                else
                    _picoCA_usage | _picoCA_pager
    fi
fi
